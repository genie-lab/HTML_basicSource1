*:not(h1,h2) { margin: 0; outline: none;  font-size: 10pt; text-decoration-line: none;  color: rgb(70, 70, 70); }

/*테두리 속성 실습 확인시 table CSS 주석 처리 하세요*/
table, th, td { border-collapse: collapse; border-spacing: 0; border: 1px solid slateblue; padding:10px;}
th { background-color: hsla(330, 100%, 71%,0.8); color: white; text-align: center;}
h4 { margin-top:100px; background-color: rgba(106, 90, 205,1.0); color: rgb(255, 255, 255);  margin-bottom: 10px; font-size: 1.2em; padding: 5px;}

/********************************************************************/


/*position 속성*/
.position-exam { width: fit-content; border: 1px dashed royalblue; display:flex; padding:10px; } /*width: fit-content -> 가로싸이즈 지정: 컨텐츠만큼 가로 차지함. display:flex; 하위 수직정렬(div)을 가로정렬로 바꿈 == inline-block과 동일효과 */

/*transform */
.block { width: 300px; height: 200px;	margin: 30px; border:1px solid blue }
.myTranslate { width:150px; height: 100px; 	background-color: lightgreen;	transform: translate(50px, 70px); } /* 요소의 이동 */
.myScale1 { width:150px; height: 100px; 	background-color: lightgreen;	transform: scale(1, 1); } /* 요소의 확대 1:1  */
.myScale2 { width:150px; height: 100px; 	background-color: lightgreen;	transform: scale(1.2, 1.5); } /* 요소의 확대 */
.myScale3 { width:150px; height: 100px; 	background-color: lightgreen;	transform: scale(0.5, 0.7); } /* 요소의 축소 */
.myRotate1 { width:150px; height: 100px; 	background-color: lightgreen;	transform: rotate(30deg); } /* 요소의 회전 양수 - 시계방향 */
.myRotate2 { width:150px; height: 100px; 	background-color: lightgreen;	transform: rotate(-30deg); } /* 요소의 회전 음수 - 시계반대방향*/
.myRotateX { width:150px; height: 100px; 	background-color: lightgreen;	transform: rotateX(60deg); } /* 요소의 x축 납짝*/
.myRotateY { width:150px; height: 100px; 	background-color: lightgreen;	transform: rotateY(60deg); } /* 요소의 y축 납짝*/
.mySkewX { width:150px; height: 100px; 	background-color: lightgreen;	transform: skewX(30deg); } /* 요소의 중앙점을 기준으로 좌표축을 따라 각도만큼 기울임*/
.mySkewY { width:150px; height: 100px; 	background-color: lightgreen;	transform: skewY(30deg); } /* 요소의 중앙점을 기준으로 좌표축을 따라 각도만큼 기울임*/
.mySkew { width:150px; height: 100px; 	background-color: lightgreen;	transform: skew(30deg, 30deg); } /* 요소의 중앙점을 기준으로 좌표축을 따라 각도만큼 기울임*/
/*다중변형*/
.manytrans { width:150px; height: 100px; 	background-color: lightgreen;	
	transform: 
	translate(100px, 100px) 
	scale(1.5, 0.8) 
	rotate(30deg) 
	skew(40deg);  } /* 다중 변형 */

	
	/*transform-origin 속성 : 요소 박스의 변형 기준점 지정*/
	.myOrigin1 { width:150px; height: 100px; 	background-color: lightgreen;	transform:  rotate(30deg); transform-origin: left top ; } 
	.myOrigin2 { width:150px; height: 100px; 	background-color: lightgreen;	transform:  rotate(30deg); transform-origin: center center ; } 
	.myOrigin3 { width:150px; height: 100px; 	background-color: lightgreen;	transform:  rotate(30deg); transform-origin: right top ; } 
	.myOrigin4 { width:150px; height: 100px; 	background-color: lightgreen;	transform:  rotate(30deg); transform-origin: left bottom ; } 
	.myOrigin5 { width:150px; height: 100px; 	background-color: lightgreen;	transform:  rotate(30deg); transform-origin: right bottom ; } 
	
	/*transform-style : 3D 공간에서 하위 요소들의 렌더링 방식 지정
	변형이 적용된 좌표를 하위 요소에 전달할지 여부 지정
	• flat → 하위 요소는 3D 좌표를 유지하지 않고 2D 좌표 영역에 표시
	• preserve-3d → 하위 요소도 부모 요소의 3D 좌표를 유지하여 표시
	*/
	/*참조 https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style */
	#myTran-flat { width:150px; height: 100px; border:solid 1px black; 	background-color: rgb(236, 181, 220);	transform: rotateX(145deg); transform-style:flat; } /*x축 기준 도는 것 3d  style == flat */
	#myTran-preserve { width:150px; height: 100px; border:solid 1px black; 	background-color: rgb(236, 181, 220);	transform: rotateX(45deg); transform-style:preserve-3d ; } /*x축 기준 도는 것 3d  style == preserve-3d */
	.myTranBox { width:150px; height: 100px; 	border:solid 1px black; background-color: rgb(255, 208, 0); transform: rotateX(30deg);  } 


	/*perspective 속성
	자식 요소에 원근감을 부여할 때 사용
	perspective-origin 속성
	3D 공간에서 원근을 조절할 때 X축과 Y축에 대한 기준점 지정
	값 → none, <길이>(>0)
	perspective 속성과 함께 사용
	값 → <길이>, %, left, center, right, top, bottom (기본: 50% 50%)
	*/
	.myParent1 { position: relative; height: 150px; width: 180px; margin: 60px; padding: 10px; border: 1px solid red; perspective: none; } /*자식 요소에 원근감*/
	.myParent2 { position: relative; height: 150px; width: 180px; margin: 60px; padding: 10px; border: 1px solid red; perspective: 100px; }  /*자식 요소에 원근감*/
	.myParent3 { position: relative; height: 150px; width: 180px; margin: 60px; padding: 10px; border: 1px solid red; perspective: 250px; }  /*자식 요소에 원근감*/
	.myChild { padding: 50px; position: absolute; border: 1px solid black; background-color: orange; transform: rotateX(45deg);}
	
	.myParent4 { position: relative; height: 150px; width: 180px; margin: 60px; padding: 10px; border: 1px solid red; perspective: 150px; perspective-origin: 0% 0% ; } /*3D 공간에서 원근을 조절할 때 X축과 Y축에 대한 기준점 지정*/
	.myParent5 { position: relative; height: 150px; width: 180px; margin: 60px; padding: 10px; border: 1px solid red; perspective: 150px; perspective-origin: center center ; }  /*3D 공간에서 원근을 조절할 때 X축과 Y축에 대한 기준점 지정*/
	.myParent6 { position: relative; height: 150px; width: 180px; margin: 60px; padding: 10px; border: 1px solid red; perspective: 150px; perspective-origin: right center ; }  /*3D 공간에서 원근을 조절할 때 X축과 Y축에 대한 기준점 지정*/


	/*backface-visibility 속성
	요소 뒷면의 표시 여부 지정
	값 → visible, hidden
	*/
	.mybackface-hidden { height: 150px; width: 150px; background-color: orange; border: 1px dotted blue; transform: rotateY(180deg); backface-visibility: hidden ; } /*요소 뒷면의 표시 여부 지정*/
	.mybackface-visible { height: 150px; width: 150px; background-color: orange; border: 1px dotted blue; transform: rotateY(180deg); backface-visibility: visible ; } /*요소 뒷면의 표시 여부 지정*/


	/*전환 지정 방법
	어떤 이벤트에 대해서 스타일 변화를 줄 것인지를 지정
	전환 관련 속성 설정
	• transition-property 속성→ 전환이 적용될 속성의 이름을 나열
	여러 개를 나열하는 경우에는 콤마로 구분
	전환 효과를 부여하려는 속성의 처음 상태와 최종 상태를 지정
	• transition-duration 속성→ 전환이 진행되는 시간 지정
	*/
	.myTransition { width: 100px; height: 100px; background: lightpink; transition-property: width; transition-duration: 2s; }
	.myTransition:hover { width: 300px; }

	/*transition-delay 속성
	전환 효과가 시작되기 전 대기시간 지정
	전환이 바로 시작하지 않고 지정한 시간이 지나야만 효과가 시작
	값 → 초(s), 밀리초(ms)

	transition-timing-function
	전환이 진행되는 속도의 형태 지정
	ease→ 느리게 시작해서 점점 빠르게 진행하다가 후반부에서 다시 느리게 진행
	linear→ 처음부터 끝까지 일정한 속도로 진행
	ease-in→ 느리게 시작해서 점점 빠르게 진행
	ease-out→ 빠르게 시작해서 점점 느리게 진행
	ease-in-out→ 느리게 시작해서 중간까지는 점점 빨라지고 중간부터 끝까지는 점점 느리게 진행
	cubic-bezier(n,n,n,n) → 사용자가 직접 형태를 지정

	transition 일괄지정 
	div { width: 150px; height: 100px; position: relative;
	left: 10px; background-color: orange;
	transition-property: width, left, background-color;
	transition-duration: 2s, 2s, 2s;
	transition-timing-function: ease-in, linear, ease-in-out;
	transition-delay: 0s, 1s, 1s; }  ============>>>

	div { ....
	transition: width 2s ease-in 0s,
				left 2s linear 1s, background-color 2s ease-in-out 1s;
				-timing-function 속성값과 -delay 속성값은 생략 가능 }
	*/

	.myTran-attrs-linear { width: 100px; height: 50px; margin-bottom: 10px; background: blue; color: white; transition-property: width; transition-duration: 2s; transition-delay: 0.5s; transition-timing-function: linear;  }
	.myTran-attrs-ease { width: 100px; height: 50px; margin-bottom: 10px; background: blue; color: white; transition-property: width; transition-duration: 2s; transition-delay: 0.5s; transition-timing-function: ease;  }
	.myTran-attrs-ease-in { width: 100px; height: 50px; margin-bottom: 10px; background: blue; color: white; transition-property: width; transition-duration: 2s; transition-delay: 0.5s; transition-timing-function: ease-in;  }
	.myTran-attrs-ease-out { width: 100px; height: 50px; margin-bottom: 10px; background: blue; color: white; transition-property: width; transition-duration: 2s; transition-delay: 0.5s; transition-timing-function: ease-out;  }
	.myTran-attrs-ease-in-out { width: 100px; height: 50px; margin-bottom: 10px; background: blue; color: white; transition-property: width; transition-duration: 2s; transition-delay: 0.5s; transition-timing-function: ease-in-out;  }
	
	.myTran-attrs-linear:hover { width: 500px;  }
	.myTran-attrs-ease:hover { width: 500px;  }
	.myTran-attrs-ease-in:hover { width: 500px;  }
	.myTran-attrs-ease-out:hover { width: 500px;  }
	.myTran-attrs-ease-in-out:hover { width: 500px;  }

	/*전환 일괄지정*/
	.myTran-all { width: 150px; height: 100px; position: relative; left: 10px; background-color: orange;
		transition-property: width, left, background-color;
		transition-duration: 2s, 2s, 2s;
		transition-timing-function: ease-in, linear, ease-in-out;
		transition-delay: 0s, 1s, 1s; }
	.myTran-all:hover { width: 300px; left: 200px; background-color: red; }

	/*변형을 적용한 전환*/
	.myTransition-apply { width: 100px; height: 100px; background: green;
		transition: width 2s,
		height 2s,
		transform 2s;
		}
	.myTransition-apply:hover { width: 300px; height: 300px; transform: rotate(720deg); }



	/***************counter********************/

	/*content 속성
	가상 요소 ::before와 ::after를 이용하여
	특정 요소의 앞/뒤에 콘텐츠를 추가할 수 있도록 지정
	 값 → normal, none, <문자열>, counter(), counters(),
	url(), attr(속성),
	open-quote, close-quote,
	no-open-quote, no-close-quote
	*/
	.myContent { font-size: 14px; line-height: 200%; }
	.block > .myContent::before { content: "content 속성은 "; font-weight: bold; color: red; }
	.block > .myContent::after { content: "-Remember this!"; background-color: yellow; }

	.myContent1 { font-size: 14px; line-height: 200%; }
	.block > .myContent1::before { content: url('../img/dotLine.png' ); }
	
	.myContent2 { font-size: 14px; line-height: 200%; }
	.block > .myContent2::before { content: attr(style); background-color: pink; }

	.myContent3 { font-size: 14px; line-height: 200%; }
	.block > .myContent3::after { content: attr(href); background-color: pink; }

	.quote::before { content: open-quote }
	.quote::after { content: close-quote }
	p.addr::before { content: no-open-quote }
	p.addr::after { content: no-close-quote }

	.chapter { counter-reset: chapter; }
	.chapter h1 { counter-reset: section; }
	.chapter h1::before { counter-increment: chapter; content: counter(chapter) "장. ";	}
	.chapter h2::before {	counter-increment: section;	content: counter(chapter) "." counter(section) "절 ";	}


	/*미디어쿼리
	같은 스타일시트 내에서
	서로 다른 미디어에 다른 스타일을 적용하기 위한 것
	 CSS3 미디어 쿼리
	미디어 타입 + 미디어 타입의 특성
	all → 모든 유형의 미디어 장치
	print → 프린터
	screen → 컴퓨터 스크린, 태블릿, 스마트폰 등

	link 요소 – media 속성
	<link rel="stylesheet" media="screen" href="ex.css">    =====>  @import url(ex.css) screen ;
	style 요소 - media 속성
		<style media="screen">
			p { font-family: sans-serif; … }
		</style>
	
	@media 규칙
	<style>
		@media screen {
		p { font-family: sans-serif; … } }
	</style>
	
	문법과 조건
	@media [ not | only ] 미디어타입 [ and (표현식) ]* {
		// CSS 코드
	}
	키워드 only → 기본값. 지정한 미디어 타입에 대해서만 적용
	표현식 → ‘미디어특성: 값’ 쌍
	콤마로 구분해서 여러 미디어 쿼리의 결합이 가능 -> 논리적 OR
	ex) @media only screen and ( min-width: 480px ) { … }
	@media screen and (color), print and (color) { … }
	@media screen and (min-width: 320px) and (max-width: 800px) { … }
	@media not screen { … }
	@media only screen { … }
	*/

/*1000px까지만 노랑*/
/* @media screen and (max-width: 1000px) { .mediaBox { background-color: yellow } }  */
/*600px에서 800px 사이범위 초록*/
@media screen and (min-width: 600px) and (max-width: 800px) { 	.mediaBox  { background-color: green } } 
/*300px부터 파랑*/
/* @media screen and (min-width: 300px) { .mediaBox  { background-color: blue } }  */

.mediaBlock-portrait { display:block; background-color: lightpink; }
@media only screen and (orientation: portrait) {
	.mediaBlock-portrait { background-color: aqua }
}
.mediaBlock-landscape { display:block; background-color: lightpink; }
@media only screen and (orientation: landscape) {
	.mediaBlock-landscap {  background-color: aqua }
}